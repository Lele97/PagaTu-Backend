server:
  port: ${SERVER_PORT:8080}

spring:
  application:
    name: gateway-service

  cloud:
    gateway:
      # Increase timeouts to prevent premature 503s
      httpclient:
        connect-timeout: 5000
        response-timeout: 30s

  main:
    web-application-type: reactive

resilience4j:
  circuitbreaker:
    instances:
      authCircuitBreaker:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
      coffeeCircuitBreaker:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
      emailCircuitBreaker:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
      defaultCircuitBreaker:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 3
  timelimiter:
    instances:
      default:
        timeout-duration: 10s

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web.reactive.function.client: DEBUG
    com.pagatu.gateway_service.filter: DEBUG

auth:
  service:
    url: ${AUTH_SERVICE_URL:lb://auth}

coffee:
  service:
    url: ${COFFEE_SERVICE_URL:lb://coffee}
email:
  service:
    url: ${EMAIL_SERVICE_URL:lb://mail}

jwt:
  secret: ${JWT_SECRET:pagatu_super_secure_secret_key_for_jwt_authentication_2025}

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE}
    enabled: true
    fetch-registry: true
  instance:
    prefer-ip-address: true

cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:https://pagatu.app,http://localhost:8888}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,PATCH,DELETE,OPTIONS,HEAD}
  allowed-headers: ${CORS_ALLOWED_HEADERS:Authorization,Content-Type,Accept-Language,Cache-Control,X-Requested-With,ngrok-skip-browser-warning,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers,Access-Control-Allow-Origin,X-Reset-Token,X-Forwarded-For,X-Forwarded-Proto,X-Forwarded-Port}
  exposed-headers: ${CORS_EXPOSED_HEADERS:Authorization,Content-Type}
  max-age: 3600